rootProject.name = "harbor"

plugins {
    // Java support
    id("java")
    // Kotlin support
    id("org.jetbrains.kotlin.jvm") version "1.4.10"
    // gradle-intellij-plugin - read more: https://github.com/JetBrains/gradle-intellij-plugin
    id("org.jetbrains.intellij") version "0.5.0"
    // gradle-changelog-plugin - read more: https://github.com/JetBrains/gradle-changelog-plugin
    id("org.jetbrains.changelog") version "0.6.1"
    // detekt linter - read more: https://detekt.github.io/detekt/gradle.html
    id("io.gitlab.arturbosch.detekt") version "1.14.1"
    // ktlint linter - read more: https://github.com/JLLeitschuh/ktlint-gradle
    id("org.jlleitschuh.gradle.ktlint") version "9.4.1"
}

pluginGroup = "${pluginGroup}"
pluginName = "${pluginName}"
pluginVersion = "${pluginVersion}"
pluginSinceBuild = "${pluginSinceBuild}"
pluginUntilBuild = "${pluginUntilBuild}"
platformType = "${platformType}"
platformVersion = "${platformVersion}"
platformDownloadSources = "${platformDownloadSources}"
group = "${pluginGroup}"
version = "${pluginVersion}"

repositories {
    mavenCentral()
    jcenter()
}
dependencies {
    detektPlugins("io.gitlab.arturbosch.detekt:detekt-formatting:1.14.1")
}

// Configure gradle-intellij-plugin plugin.
// Read more: https://github.com/JetBrains/gradle-intellij-plugin
intellij {
    pluginName = pluginName
    version = platformVersion
    plugins = ['java']
    type = platformType
    downloadSources = platformDownloadSources.toBoolean()
    updateSinceUntilBuild = true

//  Plugin Dependencies:
//  https://www.jetbrains.org/intellij/sdk/docs/basics/plugin_structure/plugin_dependencies.html
//
//  setPlugins("java")
}

// Configure detekt plugin.
// Read more: https://detekt.github.io/detekt/kotlindsl.html
detekt {
    config = files("./detekt-config.yml")
    buildUponDefaultConfig = true

    reports {
        html.enabled = false
        xml.enabled = false
        txt.enabled = false
    }
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://repo1.maven.org/maven2/' }
        maven { url 'https://repo.spring.io/snapshot' }
        maven { url 'https://repo.spring.io/release' }
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/libs-snapshot' }
        maven { url 'https://repo.spring.io/libs-release' }
        maven { url 'https://repo.spring.io/plugins-snapshot' }
        maven { url 'https://repo.spring.io/plugins-release' }
        maven { url 'https://repo.gradle.org/gradle/libs-snapshots' }
        maven { url 'https://repo.gradle.org/gradle/libs-releases' }
        maven { url 'https://plugins.gradle.org/m2' }
    }

    dependencies {
        api("org.openjfx:javafx:15@pom") {
            transitive = true
        }
        implementation "org.openjfx:javafx-web:15:mac"
        implementation "org.openjfx:javafx-swing:15:mac"
        implementation "org.openjfx:javafx-fxml:15:mac"
        implementation "org.openjfx:javafx-media:15:mac"
        implementation "org.openjfx:javafx-graphics:15:mac"
        implementation "org.openjfx:javafx-controls:15:mac"
        implementation "org.openjfx:javafx-base:15:mac"
        implementation "com.alibaba:fastjson:1.2.74"
        implementation "com.squareup.okhttp3:okhttp:4.9.0"
        implementation "org.projectlombok:lombok:1.18.16"
        annotationProcessor "org.projectlombok:lombok:1.18.16"
    }

    java {
        modularity.inferModulePath = true
        sourceCompatibility = JavaVersion.VERSION_15
        targetCompatibility = JavaVersion.VERSION_15
        withJavadocJar()
        withSourcesJar()
    }

    patchPluginXml {
        sinceBuild(pluginSinceBuild)
        untilBuild(pluginUntilBuild)
        // Get the latest available change notes from the changelog file
        changeNotes {
            changelog.getLatest().toHTML()
        }
    }

    publishPlugin {
        dependsOn("patchChangelog")
        token(System.getenv("PUBLISH_TOKEN"))
        // pluginVersion is based on the SemVer (https://semver.org) and supports pre-release labels, like 2.1.7-alpha.3
        // Specify pre-release label to publish the plugin in a custom Release Channel automatically. Read more:
        // https://jetbrains.org/intellij/sdk/docs/tutorials/build_system/deployment.html#specifying-a-release-channel
        // channels(pluginVersion.split('-') { "default" }.split('.').first())
    }
}